<!-----------------------------------------------------
* Programmer: Lance Zotigh (lzotigh1@cnm.edu)
* Purpose: A simple program that calculates what the future depreciable value of an asset will be.
------------------------------------------------------->

@page "/editpage"

@inject SuccessfullyCalculatedResults CalculatedService
@inject NavigationManager NavigationManager

<!--Main Part of page-->
<div style="background-color:darkslateblue">
    <div style="padding:1vw;">
        <form action="~/index.html" method="get" style="color:white">
            <EditForm Model="@DepSL" OnValidSubmit="@SubmitButtonPressed">
                <DataAnnotationsValidator />

                Lifetime (In Years):
                <InputNumber id="DepricationStraightLine." @bind-Value="DepSL.LifeTime"
                             name="principle" type="text" style="width:100%;" />
                <ValidationMessage For="@(() => DepSL.LifeTime)" />
                <br /><br />

                Salvage Value ($):
                <InputNumber id="DepricationStraightLine." @bind-Value="@DepSL.SalvageValue"
                             type="text" style="width:100%;" />
                <ValidationMessage For="@(() => DepSL.SalvageValue)" />
                <br /><br />

                Start Value ($):
                <InputNumber id="DepricationStraightLine." @bind-Value="@DepSL.StartValue"
                             type="text" style="width:100%;" />
                <ValidationMessage For="@(() => DepSL.StartValue)" />
                <br /><br />

                Title:
                <InputText id="DepricationStraightLine." @bind-Value="@DepSL.Title"
                           type="text" style="width:100%;" />
                <ValidationMessage For="@(() => DepSL.Title)" />
                <br /><br />

                Date Entered in Inventory:
                <InputDate id="DepricationStraightLine." @bind-Value="@DepSL.DateAddedToInventory"
                           style="width:100%;" />
                <ValidationMessage For="@(() => DepSL.DateAddedToInventory)" />
                <br /><br />

                Date Removed From Inventory:
                <InputDate id="DepricationStraightLine." @bind-Value="@DepSL.DateRemovedFromInventory"
                           style="width:100%;" />
                <ValidationMessage For="@(() => DepSL.DateRemovedFromInventory)" />
                <br /><br />

                <button type="button" @onclick="SubmitButtonPressed">Submit</button>
                <button type="button" @onclick="ClearButtonPressed">Clear</button>
            </EditForm>
        </form>
    </div>
    <div style="color:white">
        <p style="font-weight:bold">  End Value: $@Final.EndValue</p>
    </div>
</div>
<div>
    @UIMessage
</div>
<!--End of Main Part of page-->

@code {
    //Initilizers
    DeprecationStraightLine DepSL = new DeprecationStraightLine();
    DeprecationStraightLine Final = new DeprecationStraightLine();
    string UIMessage = "";
    int i;

    /// <summary>
    /// Method that is ran at initiliation that will populate the form.
    /// </summary>
    void initalize()
    {
        foreach (var CalculatedResult in CalculatedService.CalculatedResults)
        {
            if (CalculatedResult.Position >= 0)
            {
                DepSL = CalculatedResult;
            }
        }
    }

    /// <summary>
    /// initilizer that populates the form via a initilize method.
    /// </summary>
    /// <returns>Completed Task</returns>
    protected override async Task OnInitializedAsync()
    {
        initalize();
    }

    /// <summary>
    /// Handles the Button submit event and edits the desired/selected object with the new values.
    /// </summary>
    void SubmitButtonPressed()
    {
        if (DepSL.LifeTime > 0 && DepSL.SalvageValue > 0 && DepSL.StartValue > 0 && DepSL.Title != "" && DepSL.DateAddedToInventory != DateTime.MinValue && DepSL.DateRemovedFromInventory != DateTime.MinValue && DepSL.DateAddedToInventory != DepSL.DateRemovedFromInventory)
        {
            i = DepSL.Position;
            CalculatedService.CalculatedResults.RemoveAt(DepSL.Position);
            DepSL.Position = -1;
            CalculatedService.CalculatedResults.Insert(i, DepSL);
            UIMessage = "Calculation Successfully Received!";
            NavigationManager.NavigateTo("Inventory");
        }
        else { UIMessage = "Calculation not accepted please ensure that all fields are correct and filled."; }
    }

    /// <summary>
    /// Handles the Remove button event clearing the values.
    /// </summary>
    void ClearButtonPressed()
    {
        DepSL.LifeTime = 0;
        DepSL.SalvageValue = 0;
        DepSL.StartValue = 0;
        DepSL.Title = "";
        DepSL.EndValue = 0;
        DepSL.DateAddedToInventory = default;
        DepSL.DateRemovedFromInventory = default;


        Final.LifeTime = 0;
        Final.SalvageValue = 0;
        Final.StartValue = 0;
        Final.Title = "";
        Final.EndValue = 0;
        Final.DateAddedToInventory = default;
        Final.DateRemovedFromInventory = default;

        UIMessage = "";
    }
}
